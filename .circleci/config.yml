version: 2.1

in_nix_shell: &in_nix_shell
  shell: /usr/bin/env nix develop --command bash -eo pipefail

commands:
  configure_nix:
    description: Configure nix for use in workflows
    parameters:
      core_count:
        type: integer
        # Default medium instance has 2 cores
        default: 2
    steps:
      - run:
          name: Editing nix.conf
          command: |
            echo 'experimental-features = nix-command flakes' >> /etc/nix/nix.conf
            echo 'cores = << parameters.core_count >>' >> /etc/nix/nix.conf
        
executors:
  default_nix_devenv:
    docker:
      - image: nixos/nix:2.21.1
    working_directory: /opt/qlc
    environment:
      CARGO_HOME: /opt/qlc/.cargo

  github_api_client:
    docker:
      - image: notarize/github-api-client:ghr-0.16.0
    resource_class: small
    working_directory: /opt/qlc

  node_env:
    docker:
      - image: cimg/node:20.12.1
        user: root
    resource_class: small
    working_directory: /opt/qlc

jobs:
  static_analysis:
    executor: default_nix_devenv
    steps:
      - checkout
      - configure_nix
      - run:
          name: Priming nix shell
          command: nix build --print-build-logs --no-link --print-out-paths .#devShells.x86_64-linux.default
      - restore_cache:
          keys:
            - cargo-cache-v3-{{ checksum "Cargo.lock" }}
            - cargo-cache-v3-
      - run:
          name: Linting
          command: just lint
          <<: *in_nix_shell
      - run:
          name: Formatting
          command: |
            cargo fmt --all -- --check
            nix fmt -- --check .
          when: always
          <<: *in_nix_shell
      - run:
          name: Testing
          command: |
            just build-test-schema
            just test -- --test-threads=4
          when: always
          <<: *in_nix_shell
      - save_cache:
          key: cargo-cache-v3-{{ checksum "Cargo.lock" }}
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
            - .cargo
      - persist_to_workspace:
          root: /opt
          paths:
            - qlc

  build_release_bin:
    executor: default_nix_devenv
    steps:
      - attach_workspace: { at: /opt }
      - run:
          name: Building all release targets
          command: |
            nix build --print-build-logs --print-out-paths \
              --out-link target/nix/result \
              .#qlc-x86_64-linux .#qlc-aarch64-linux \
              .#qlc-x86_64-darwin .#qlc-aarch64-darwin

            ls -la target/nix
      - persist_to_workspace:
          root: /opt
          paths:
            - qlc/target/nix

  create_github_release:
    executor: github_api_client
    steps:
      - attach_workspace: { at: /opt }
      - run:
          name: Making GitHub release
          command: ./.circleci/bin/make-github-release.sh
      - persist_to_workspace:
          root: /opt
          paths:
            - qlc/archives/checksums.txt

  create_npm_release:
    executor: node_env
    steps:
      - attach_workspace: { at: /opt }
      - run:
          name: Configuring NPM token
          command: |
            echo "registry=https://registry.npmjs.org/" > ~/.npmrc
            echo "//registry.npmjs.org/:_authToken=${NOTARBOT_NPM_TOKEN}" >> ~/.npmrc
      - run:
          name: Publishing NPM release
          command: ./.circleci/bin/make-npm-release.sh

workflows:
  version: 2
  Everything:
    jobs:
      - static_analysis

      - build_release_bin:
          requires:
            - static_analysis
          filters:
            branches:
              only:
                - production
                - prerelease

      - create_github_release:
          requires:
            - build_release_bin
          filters:
            branches:
              only:
                - production
                - prerelease

      - create_npm_release:
          requires:
            - create_github_release
          filters:
            branches:
              only:
                - production
                - prerelease
