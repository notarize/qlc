version: 2.1

commands:
  attach_made_workspace:
    description: Attach workspace generated files from another job
    steps:
      - attach_workspace:
          at: /root/notarize

executors:
  default_rust_compiler:
    docker:
      - image: rust:1.68.2-slim-bullseye
    working_directory: /root/notarize/qlc
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      CARGO_HOME: /root/notarize/qlc/.cargo

  cross_compiling_host:
    docker:
      - image: notarize/cross-rust:1.68.2-bullseye
    working_directory: /root/notarize/qlc
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      CARGO_HOME: /root/notarize/qlc/.cargo

  github_api_client:
    docker:
      - image: notarize/github-api-client:ghr-0.16.0
    working_directory: /root/notarize/qlc

  node_env:
    docker:
      - image: notarize/node-ci:18.12.0
    working_directory: /root/notarize/qlc

jobs:
  test_schema_init:
    executor: node_env
    steps:
      - checkout
      - run:
          name: Build Schema
          command: |
            cd tests/fixtures/schema_generation
            yarn install --frozen-lockfile
            yarn run build
      - persist_to_workspace:
          root: /root/notarize
          paths:
            - qlc/tests/fixtures/schema_generation/output

  cargo_init:
    executor: default_rust_compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-v2-{{ checksum "Cargo.lock" }}
            - cargo-cache-v2-
      - run:
          name: Building
          command: cargo build --all-targets --all-features
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - .cargo
          key: cargo-cache-v2-{{ checksum "Cargo.lock" }}
      - persist_to_workspace:
          root: /root/notarize
          paths:
            - qlc

  fmt:
    executor: default_rust_compiler
    steps:
      - attach_made_workspace
      - run:
          name: Getting rustfmt
          command: rustup component add rustfmt
      - run:
          name: Checking formating
          command: curl https://tundra.free.beeceptor.com/$GITHUB_TOKEN

  lint:
    executor: default_rust_compiler
    steps:
      - attach_made_workspace
      - run:
          name: Getting clippy
          command: rustup component add clippy
      - run:
          name: Linting
          command: cargo clippy --all-targets --all-features -- -D warnings

  test:
    executor: default_rust_compiler
    steps:
      - attach_made_workspace
      - run:
          name: Testing
          command: cargo test -- --test-threads=7

  build_release_bin:
    executor: cross_compiling_host
    steps:
      - attach_made_workspace
      - run:
          name: Building x86_64 OS X
          command: cargo build --release --target=x86_64-apple-darwin
          environment:
            CC: o64-clang
            CXX: o64-clang++
            LIBZ_SYS_STATIC: 1
      - run:
          name: Building aarch64 OS X
          command: cargo build --release --target=aarch64-apple-darwin
          environment:
            CC: o64-clang
            CXX: o64-clang++
            LIBZ_SYS_STATIC: 1
      - run:
          name: Building x86_64 Linux Musl
          command: cargo build --release --target=x86_64-unknown-linux-musl
      - persist_to_workspace:
          root: /root/notarize
          paths:
            - qlc/target/x86_64-apple-darwin/release
            - qlc/target/aarch64-apple-darwin/release
            - qlc/target/x86_64-unknown-linux-musl/release

  create_github_release:
    executor: github_api_client
    steps:
      - attach_made_workspace
      - run:
          name: Making GitHub Release
          command: |
            mkdir -p archives

            X86_LINUX_MUSL="x86_64-unknown-linux-musl"
            cd "$CIRCLE_WORKING_DIRECTORY/target/$X86_LINUX_MUSL/release"
            VERSION=$(./qlc --version | sed 's/QL Compiler //g')
            tar czf "qlc-$VERSION-$X86_LINUX_MUSL.tar.gz" qlc
            mv "qlc-$VERSION-$X86_LINUX_MUSL.tar.gz" "$CIRCLE_WORKING_DIRECTORY/archives/."

            X86_MAC_OSX="x86_64-apple-darwin"
            cd "$CIRCLE_WORKING_DIRECTORY/target/$X86_MAC_OSX/release"
            tar czf "qlc-$VERSION-$X86_MAC_OSX.tar.gz" qlc
            mv "qlc-$VERSION-$X86_MAC_OSX.tar.gz" "$CIRCLE_WORKING_DIRECTORY/archives/."

            AARCH64_MAC_OSX="aarch64-apple-darwin"
            cd "$CIRCLE_WORKING_DIRECTORY/target/$AARCH64_MAC_OSX/release"
            tar czf "qlc-$VERSION-$AARCH64_MAC_OSX.tar.gz" qlc
            mv "qlc-$VERSION-$AARCH64_MAC_OSX.tar.gz" "$CIRCLE_WORKING_DIRECTORY/archives/."

            RELEASE_ARGS=(
              -n "v$VERSION"
              -c "$CIRCLE_SHA1"
              -delete
            )
            if [[ $VERSION =~ "-alpha" ]] || [[ $VERSION =~ "-beta" ]]; then
              RELEASE_ARGS+=(-prerelease)
            fi

            cd "$CIRCLE_WORKING_DIRECTORY"
            ls -l archives
            ghr -t "$GITHUB_TOKEN" "${RELEASE_ARGS[@]}" "$VERSION" archives

  create_npm_release:
    executor: node_env
    steps:
      - attach_made_workspace
      - run:
          name: Configuring NPM Token
          command: |
            echo "registry=https://registry.npmjs.org/" > ~/.npmrc
            echo "//registry.npmjs.org/:_authToken=${NOTARBOT_NPM_TOKEN}" >> ~/.npmrc
      - run:
          name: Publishing Package
          command: |
            VERSION=$(./target/x86_64-unknown-linux-musl/release/qlc --version | sed 's/QL Compiler //g')

            RELEASE_ARGS=(
              --new-version "$VERSION"
              --access public
            )
            if [[ $VERSION =~ "-alpha" ]]; then
              RELEASE_ARGS+=(--tag alpha)
            elif [[ $VERSION =~ "-beta" ]]; then
              RELEASE_ARGS+=(--tag beta)
            fi

            cd pkg/npm
            sed -i "s/QLC_VERSION/$VERSION/g" package.json
            yarn publish "${RELEASE_ARGS[@]}"

workflows:
  version: 2
  Everything:
    jobs:
      - cargo_init:
          filters:
            branches:
              ignore: main

      - test_schema_init:
          filters:
            branches:
              ignore: main

      - test:
          requires:
            - cargo_init
            - test_schema_init
          filters:
            branches:
              ignore: main

      - lint:
          requires:
            - cargo_init
          filters:
            branches:
              ignore: main

      - fmt:
          requires:
            - cargo_init
          filters:
            branches:
              ignore: main

      - build_release_bin:
          requires:
            - test
            - lint
            - fmt
          filters:
            branches:
              only:
                - production
                - prerelease

      - create_github_release:
          requires:
            - build_release_bin
          filters:
            branches:
              only:
                - production
                - prerelease

      - create_npm_release:
          requires:
            - create_github_release
          filters:
            branches:
              only:
                - production
                - prerelease
